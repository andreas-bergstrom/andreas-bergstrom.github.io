<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tips and Gotchas on Andreas Bergström</title><link>https://andreasbergstrom.com/tags/tips-and-gotchas/</link><description>Recent content in Tips and Gotchas on Andreas Bergström</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Apr 2019 09:11:37 +0200</lastBuildDate><atom:link href="https://andreasbergstrom.com/tags/tips-and-gotchas/index.xml" rel="self" type="application/rss+xml"/><item><title>Django Tips and Gotchas #1 - reverse() vs reverse_lazy()</title><link>https://andreasbergstrom.com/posts/django-gotchas-and-tips/</link><pubDate>Wed, 17 Apr 2019 09:11:37 +0200</pubDate><guid>https://andreasbergstrom.com/posts/django-gotchas-and-tips/</guid><description>Named URL-routes is a handy feature that makes maintenance less of a headache as a codebase grows. In Django there are three aspects to URL-routing:
The URL-config itself, commonly urls.py in apps and a main project configuration that imports those. In templates, by using the {% url &amp;lsquo;route-name&amp;rsquo; %} template tag to construct URL&amp;rsquo;s automatically. In views, for example redirects often use named routes. Consider a simple app where</description></item><item><title>Python Tips and Gotchas #4 - Understand truthy and falsy</title><link>https://andreasbergstrom.com/posts/python-gotchas-and-tips-4/</link><pubDate>Tue, 16 Apr 2019 18:21:37 +0100</pubDate><guid>https://andreasbergstrom.com/posts/python-gotchas-and-tips-4/</guid><description>Truthy and falsy are the ways values implicitly converts to booleans when used in if-expressions, and are different to the booleans True and False. Booleans work pretty much identical in every major programming language. But the workings of truthy and falsy are not. Javascript are infamous for being really messy and inconsistent with its truthy and falsy values, while Swift and C# simply does not allow any implicit conversion to booleans.</description></item><item><title>Python Tips and Gotchas #3 - Be more effecient with the REPL</title><link>https://andreasbergstrom.com/posts/python-gotchas-and-tips-3/</link><pubDate>Tue, 16 Apr 2019 16:21:37 +0100</pubDate><guid>https://andreasbergstrom.com/posts/python-gotchas-and-tips-3/</guid><description>The REPL is certainly one of Python&amp;rsquo;s most unique features. While there are other languages that also provides some kind of interactive prompt, none is as fleshed out as in Python. And while it is easy to get started with, there a few tips that will help you work faster.
Interactive execution of modules and packages Probably the most useful feature of the REPL is the ability to load modules and packages in interactive mode.</description></item><item><title>Python Tips and Gotchas #2 - Microseconds and accuracy in time.sleep()</title><link>https://andreasbergstrom.com/posts/python-gotchas-and-tips-2/</link><pubDate>Tue, 16 Apr 2019 14:21:37 +0100</pubDate><guid>https://andreasbergstrom.com/posts/python-gotchas-and-tips-2/</guid><description>The sleep function in the time module can be used to halt execution for a given number of seconds. But it is easy to miss that the argument can be a float as well. In other words, you can use microseconds and not just whole seconds:
1 2 import time time.sleep(0.05) This can be useful when you need to make a short pause but not necesseraly in seconds.</description></item><item><title>Python Tips and Gotchas #1 - Replace literals with constants in if-expressions</title><link>https://andreasbergstrom.com/posts/python-gotchas-and-tips/</link><pubDate>Sun, 31 Mar 2019 15:21:37 +0100</pubDate><guid>https://andreasbergstrom.com/posts/python-gotchas-and-tips/</guid><description>Whenever you need to check the value of a basic data type, the most straight-forward solution is to use literals:
1 2 3 4 if direction == &amp;#39;up&amp;#39;: # ... elif direction == &amp;#39;down&amp;#39;: # ... This might seem like pythonic code, but its simplicity could bite you. If you have a lot of conditions and perhaps in multiple locations in your code, what happens if you mistype any of those string literals?</description></item></channel></rss>