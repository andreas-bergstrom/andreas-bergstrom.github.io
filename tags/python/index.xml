<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Andreas Bergström</title><link>https://andreasbergstrom.com/tags/python/</link><description>Recent content in Python on Andreas Bergström</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 20 Mar 2019 15:20:53 +0100</lastBuildDate><atom:link href="https://andreasbergstrom.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Various Python Utilities</title><link>https://andreasbergstrom.com/posts/various-python-utilities/</link><pubDate>Wed, 20 Mar 2019 15:20:53 +0100</pubDate><guid>https://andreasbergstrom.com/posts/various-python-utilities/</guid><description>This posts lists various small Python utilities, with link to gist on Github and embedded repl for running the code.
Random names generator Generates a random name-like string, uses a generator function to yield each letter.
Gist on Github
import string import random vowels = &amp;#39;aeiou&amp;#39; consonants = &amp;#39;bcdfghijklmnpqrstvwxz&amp;#39; def get_letter(last_letter=None): if last_letter: last_letter_was_consonant = &amp;#39;&amp;#39;.join(last_letter) in consonants else: last_letter_was_consonant = False if not last_letter_was_consonant and bool(random.randint(0,1)): last_was_consonant = True yield random.</description></item><item><title>argparse - modern Python command line arguments</title><link>https://andreasbergstrom.com/posts/python-argparse/</link><pubDate>Tue, 05 Mar 2019 21:10:21 +0100</pubDate><guid>https://andreasbergstrom.com/posts/python-argparse/</guid><description>If you search for information on how to write Python modules that accepts command line arguments, you are very likely to stumble upon sys.argv and getopt() and go with it. But since Python 3.2 there is a better alternative that requires less boilerplate and less re-inventing the wheel: argparse.
Just like getopt() argparse relies on sys.argv but it is more high-level and provides more functionality out of the box. At the core of argparse is the class ArgumentParser, which returns an object that you can use to create the argument interface.</description></item><item><title>Python del vs assigning to None</title><link>https://andreasbergstrom.com/posts/python-del-vs-assign-none/</link><pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate><guid>https://andreasbergstrom.com/posts/python-del-vs-assign-none/</guid><description>Python utilizes garbage collection to free the developer from the hassle of manually handling allocating and de-allocating memory. But there are still some details that could suprise you unless you are aware of them.
Because even though the Python runtime will take care of memory management, sometimes developers will want to manually tell the garbage colletor that a variable is no longer needed. Either because they are doing some edge-case optimization and really know what they are doing or they think they are smart but have no idea what they are doing.</description></item></channel></rss>