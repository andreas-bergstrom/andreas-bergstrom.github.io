<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Andreas Bergström</title><link>https://andreasbergstrom.com/posts/</link><description>Recent content in Posts on Andreas Bergström</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 05 Mar 2019 21:10:21 +0100</lastBuildDate><atom:link href="https://andreasbergstrom.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>argparse - modern Python command line arguments</title><link>https://andreasbergstrom.com/posts/python-argparse/</link><pubDate>Tue, 05 Mar 2019 21:10:21 +0100</pubDate><guid>https://andreasbergstrom.com/posts/python-argparse/</guid><description>If you search for information on how to write Python modules that accepts command line arguments, you are very likely to stumble upon sys.argv and getopt() and go with it. But since Python 3.2 there is a better alternative that requires less boilerplate and less re-inventing the wheel: argparse.
Just like getopt() argparse relies on sys.argv but it is more high-level and provides more functionality out of the box. At the core of argparse is the class ArgumentParser, which returns an object that you can use to create the argument interface.</description><content type="html"><![CDATA[<p>If you search for information on how to write Python modules that accepts command line arguments, you are very likely to stumble upon sys.argv and getopt() and go with it. But since Python 3.2 there is a better alternative that requires less boilerplate and less re-inventing the wheel: argparse.</p>

<p>Just like getopt() argparse relies on sys.argv but it is more high-level and provides more functionality out of the box. At the core of argparse is the class ArgumentParser, which returns an object that you can use to create the argument interface. This interface will automatically provide argument parsing and generate the help text that users expect when using -h or &ndash;help.</p>

<p>We will start with a simple program that accepts two positional arguments:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">argparse</span>

<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;positional_argument_1&#34;</span><span class="p">)</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;positional_argument_2&#34;</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">positional_argument_1</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>So first a ArgumentParser-object is created, which we then add two (requied) positional arguments to and finally we dispatch the parser. This will then look into sys.argv and figure out how to parse its contents (which is all arguments provided by the user).</p>

<p>That looks very neat and object-oriented. But we could instead access any positonal arguments directly through sys.argv with much less code:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="c1"># note: 0 = the name of the script, first positional argument at 1</span></code></pre></td></tr></table>
</div>
</div>

<p>So what is the point of using argparser? Let&rsquo;s look at a more functional example:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">argparse</span>
 
<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;-s&#34;</span><span class="p">,</span> <span class="s2">&#34;--string&#34;</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
	<span class="n">help</span><span class="o">=</span><span class="s2">&#34;string to uppercase&#34;</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">())</span>
 
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Uppercase of {args[&#39;string&#39;]} is {args[&#39;string&#39;].upper()}&#34;</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Here we can see argparse starts to shine. This time we add an argument as a flag argument instead of positional. It is also set as required and a small help text is provided. This is what is returned if we run the script without any arguments:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">usage: main.py <span class="o">[</span>-h<span class="o">]</span> -s STRING
main.py: error: the following arguments are required: -s/--string</code></pre></div>

<p>So argparse will automatically make sure all required arguments are provided. And it also displays usage information on what arguments this program expects, something familiar to anyone who has used command line programs. If we provide only the -h flag futher information is shown:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">usage: main.py <span class="o">[</span>-h<span class="o">]</span> -s STRING

optional arguments:
  -h, --help            show this <span class="nb">help</span> message and <span class="nb">exit</span>
  -s STRING, --string STRING
                        string to uppercase</code></pre></div>

<p>This format should be even more familiar if you have played around on the command line. And argparse will automatically provide this help interface from the arguments that is specified, we did not have to set anything up ourselves!</p>

<p>So now we know how to use this program and if we provide -s andreas it will return:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Uppercase of andreas is ANDREAS</code></pre></div>

<p>For this input sys.argv will contain either [&lsquo;main.py&rsquo;, &lsquo;-s&rsquo;, &lsquo;andreas&rsquo;], or [&lsquo;main.py&rsquo;, &lsquo;&ndash;string&rsquo;, &lsquo;andreas&rsquo;] if we had used the &ndash;string flag instead. But thanks to argparser we no longer have to parse this manually and can ignore all possible edge-cases and order.</p>

<p>This is just the basics and I plan to cover more advanced usage sometime. The <a href="https://docs.python.org/3.3/library/argparse.html">docs</a> has a more complete reference.</p>

<p>While argparser only handles arguments sent when starting the program, you can use <a href="https://github.com/prompt-toolkit/python-prompt-toolkit">python-prompt-toolkit</a> to create more interactive command prompts.</p>


]]></content></item><item><title>Python del vs assigning to None</title><link>https://andreasbergstrom.com/posts/python-del-vs-assign-none/</link><pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate><guid>https://andreasbergstrom.com/posts/python-del-vs-assign-none/</guid><description>Python utilizes garbage collection to free the developer from the hassle of manually handling allocating and de-allocating memory. But there are still some details that could suprise you unless you are aware of them.
Because even though the Python runtime will take care of memory management, sometimes developers will want to manually tell the garbage colletor that a variable is no longer needed. Either because they are doing some edge-case optimization and really know what they are doing or they think they are smart but have no idea what they are doing.</description><content type="html"><![CDATA[<p>Python utilizes garbage collection to free the developer from the hassle of manually handling allocating and de-allocating memory. But there are still some details that could suprise you unless you are aware of them.</p>

<p>Because even though the Python runtime will take care of memory management, sometimes developers will want to manually tell the garbage colletor that a variable is no longer needed. Either because they are doing some edge-case optimization and really know what they are doing or they think they are smart but have no idea what they are doing. Most likely the latter as the Python runtime most often does not release unused memory back to the operating system.</p>

<p>But when someone need to somehow mark a variable as ready to be freed by the garbage collector, there are usually two solutions they come across:</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="bp">None</span></code></pre></div>

<p>or</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">del</span> <span class="n">x</span></code></pre></div>

<p>The difference is that <strong>x = None</strong> will free whatever it referenced but keep the name around even though it&rsquo;s just referencing None (which is a type, NoneType).</p>

<p>On the other hand <strong>del x</strong> will completely remove both the name and what it referenced. If you thereafter try to use x an NameError will be thrown (or AttributeError in case of a object property).</p>

<p>So in practice, by assigning None to a name you can still use it in expressions while using del the name is completely removed. In the first case a few bytes is needed to keep the name in memory, while the later completely clears all memory usage.</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">gc</span>

<span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;Some text here to give the variable a decent size&#39;</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x value before deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x size before deletion: {} bytes&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">getsizeof</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;y value before deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>

<span class="n">x</span> <span class="o">=</span> <span class="bp">None</span>
<span class="k">del</span> <span class="n">y</span>
<span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span> <span class="c1"># Not really needed, just to show garbage collection has been done hereafter</span>

<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x value after deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x size after deletion: {} bytes&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">getsizeof</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span> <span class="c1"># A few bytes needed to keep symbol name</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x type after deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">x</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;Can still use x!&#39;</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s1">&#39;y value after deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y</span><span class="p">))</span> <span class="c1"># Will throw NameError (AttributeError in case of class property)</span></code></pre></td></tr></table>
</div>
</div>

<p>Output:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">x value before deletion: Some text here to give the variable a decent size
x size before deletion: <span class="m">98</span> bytes
y value before deletion: <span class="m">2</span>
x value after deletion: None
x size after deletion: <span class="m">16</span> bytes
x <span class="nb">type</span> after deletion: &lt;class <span class="s1">&#39;NoneType&#39;</span>&gt;
Can still use x!
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">&#34;Untitled.py&#34;</span>, line <span class="m">21</span>, in &lt;module&gt;
    print<span class="o">(</span><span class="s1">&#39;y value after deletion: {}&#39;</span>.format<span class="o">(</span>y<span class="o">))</span> <span class="c1"># Will throw NameError (AttributeError in case of class property)</span>
NameError: name <span class="s1">&#39;y&#39;</span> is not defined</code></pre></div>

<p>As you can see in the error above, if you for whatever reason need to hook into the memory management, unless you know the difference between assigning to None and using <strong>del</strong> it could confuse you.</p>

<p>Let us now look at the bytecode to see the technical difference:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">gc</span>
<span class="kn">import</span> <span class="nn">dis</span>

<span class="k">def</span> <span class="nf">using_none</span><span class="p">():</span>
	<span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>

	<span class="n">x</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># &lt;-- ASSIGNING TO NONE</span>

<span class="k">def</span> <span class="nf">using_del</span><span class="p">():</span>
	<span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>

	<span class="k">del</span> <span class="n">x</span> <span class="c1"># &lt;-- USING DEL</span>

<span class="k">print</span><span class="p">(</span><span class="s2">&#34;Bytecode when assigning to None:&#34;</span><span class="p">)</span>
<span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">using_none</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">Bytecode when using del:&#34;</span><span class="p">)</span>
<span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">using_del</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Output:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Bytecode when assigning to None:
  <span class="m">5</span>           <span class="m">0</span> LOAD_CONST               <span class="m">1</span> <span class="o">(</span><span class="m">1</span><span class="o">)</span>
              <span class="m">2</span> STORE_FAST               <span class="m">0</span> <span class="o">(</span>x<span class="o">)</span>

  <span class="m">7</span>           <span class="m">4</span> LOAD_CONST               <span class="m">0</span> <span class="o">(</span>None<span class="o">)</span>
              <span class="m">6</span> STORE_FAST               <span class="m">0</span> <span class="o">(</span>x<span class="o">)</span>
              <span class="m">8</span> LOAD_CONST               <span class="m">0</span> <span class="o">(</span>None<span class="o">)</span>
             <span class="m">10</span> RETURN_VALUE

Bytecode when using del:
 <span class="m">10</span>           <span class="m">0</span> LOAD_CONST               <span class="m">1</span> <span class="o">(</span><span class="m">1</span><span class="o">)</span>
              <span class="m">2</span> STORE_FAST               <span class="m">0</span> <span class="o">(</span>x<span class="o">)</span>

 <span class="m">12</span>           <span class="m">4</span> DELETE_FAST              <span class="m">0</span> <span class="o">(</span>x<span class="o">)</span>
              <span class="m">6</span> LOAD_CONST               <span class="m">0</span> <span class="o">(</span>None<span class="o">)</span>
              <span class="m">8</span> RETURN_VALUE</code></pre></div>

<p>So using <strong>del</strong> results in only one bytecode, DELETE_FAST, while assigning to None actually runs a full assignment using LOAD_CONST and STORE_FAST. The last LOAD_CONST before RETURN_VALUE in both functions is simply the return value None that every Python function implicitly returns.</p>
]]></content></item></channel></rss>