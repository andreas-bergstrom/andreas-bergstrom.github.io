<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Andreas Bergström</title><link>https://andreasbergstrom.com/posts/</link><description>Recent content in Posts on Andreas Bergström</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 02 Apr 2019 14:56:41 +0200</lastBuildDate><atom:link href="https://andreasbergstrom.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Using PyCharm scratch files with Django</title><link>https://andreasbergstrom.com/posts/pycharm-scratch-files-django/</link><pubDate>Tue, 02 Apr 2019 14:56:41 +0200</pubDate><guid>https://andreasbergstrom.com/posts/pycharm-scratch-files-django/</guid><description>Scratches are a great feature in PyCharm that are going to speed up your development and prototyping once you start using them. A scratch file is nothing more than a temporary file that lives outside of your regular project structure:
While the Django shell is great for trying out your code, it is not that comfortable to work with when you are writing large amounts of code. This is where scratch files comes handy, allowing you to use a regular file but without cluttering up your real codebase.</description><content type="html"><![CDATA[<p><a href="https://www.jetbrains.com/help/pycharm/scratches.html">Scratches</a> are a great feature in PyCharm that are going to speed up your development and prototyping once you start using them. A scratch file is nothing more than a temporary file that lives outside of your regular project structure:</p>

<p><img src="/images/pycharm_scratches.png" alt="PyCharm scratch files in Project view" /></p>

<p>While the Django shell is great for trying out your code, it is not that comfortable to work with when you are writing large amounts of code. This is where scratch files comes handy, allowing you to use a regular file but without cluttering up your real codebase.</p>

<p>Though if you fire up a new scratch file and try to access any part of a Django app, for example a model, you are going to get an ImproperlyConfigured-error similar to this:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s2">&#34;/Users/andreasbergstrom/Library/Preferences/PyCharm2019.1/scratches/scratch_1.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="kn">from</span> <span class="nn">app.models</span> <span class="kn">import</span> <span class="n">Job</span>
  <span class="n">File</span> <span class="s2">&#34;/Users/andreasbergstrom/Projects/kodare_se/app/models.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">5</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="k">class</span> <span class="nc">BaseModel</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
  <span class="n">File</span> <span class="s2">&#34;/Users/andreasbergstrom/Projects/kodare_se/venv/lib/python3.7/site-packages/django/db/models/base.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">87</span><span class="p">,</span> <span class="ow">in</span> <span class="fm">__new__</span>
    <span class="n">app_config</span> <span class="o">=</span> <span class="n">apps</span><span class="o">.</span><span class="n">get_containing_app_config</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
  <span class="n">File</span> <span class="s2">&#34;/Users/andreasbergstrom/Projects/kodare_se/venv/lib/python3.7/site-packages/django/apps/registry.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">249</span><span class="p">,</span> <span class="ow">in</span> <span class="n">get_containing_app_config</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">check_apps_ready</span><span class="p">()</span>
  <span class="n">File</span> <span class="s2">&#34;/Users/andreasbergstrom/Projects/kodare_se/venv/lib/python3.7/site-packages/django/apps/registry.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">131</span><span class="p">,</span> <span class="ow">in</span> <span class="n">check_apps_ready</span>
    <span class="n">settings</span><span class="o">.</span><span class="n">INSTALLED_APPS</span>
  <span class="n">File</span> <span class="s2">&#34;/Users/andreasbergstrom/Projects/kodare_se/venv/lib/python3.7/site-packages/django/conf/__init__.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">57</span><span class="p">,</span> <span class="ow">in</span> <span class="fm">__getattr__</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">_setup</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
  <span class="n">File</span> <span class="s2">&#34;/Users/andreasbergstrom/Projects/kodare_se/venv/lib/python3.7/site-packages/django/conf/__init__.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">42</span><span class="p">,</span> <span class="ow">in</span> <span class="n">_setup</span>
    <span class="o">%</span> <span class="p">(</span><span class="n">desc</span><span class="p">,</span> <span class="n">ENVIRONMENT_VARIABLE</span><span class="p">))</span>
<span class="n">django</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="n">ImproperlyConfigured</span><span class="p">:</span> <span class="n">Requested</span> <span class="n">setting</span> <span class="n">INSTALLED_APPS</span><span class="p">,</span> <span class="n">but</span> <span class="n">settings</span> <span class="n">are</span> <span class="ow">not</span> <span class="n">configured</span><span class="o">.</span> <span class="n">You</span> <span class="n">must</span> <span class="n">either</span> <span class="n">define</span> <span class="n">the</span> <span class="n">environment</span> <span class="n">variable</span> <span class="n">DJANGO_SETTINGS_MODULE</span> <span class="ow">or</span> <span class="n">call</span> <span class="n">settings</span><span class="o">.</span><span class="n">configure</span><span class="p">()</span> <span class="n">before</span> <span class="n">accessing</span> <span class="n">settings</span><span class="o">.</span></code></pre></td></tr></table>
</div>
</div>

<p>The reason is that you are trying to use a Django app that has not been initialized yet. Even if you are just trying to use some model the framework still need to initialize and configure itself. To do this, just drop these lines of code at the top of your scratch file (before any other imports) and replace &ldquo;YOUAPPNAME&rdquo; with your app name:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>

<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s2">&#34;DJANGO_SETTINGS_MODULE&#34;</span><span class="p">,</span> <span class="s2">&#34;YOUAPPNAME.settings&#34;</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">django</span>
<span class="n">django</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span></code></pre></td></tr></table>
</div>
</div>

<p>Now Django is configured and you can use it just like you can at the management shell.</p>
]]></content></item><item><title>Python Tips and Gotchas</title><link>https://andreasbergstrom.com/posts/python-gotchas-and-tips/</link><pubDate>Sun, 31 Mar 2019 15:21:37 +0100</pubDate><guid>https://andreasbergstrom.com/posts/python-gotchas-and-tips/</guid><description>This post is a work in progress and will expand over time.
Replace literals with constants in if-expressions Whenever you need to check the value of a basic data type, the most straight-forward solution is to use literals:
1 2 3 4 if direction == &amp;#39;up&amp;#39;: # ... elif direction == &amp;#39;down&amp;#39;: # ... This might seem like pythonic code, but its simplicity could bite you.</description><content type="html"><![CDATA[

<hr>

<p><div style="text-align: center">
<strong>This post is a work in progress and will expand over time.</strong>
</div>
<hr></p>

<h2 id="replace-literals-with-constants-in-if-expressions">Replace literals with constants in if-expressions</h2>

<p>Whenever you need to check the value of a basic data type, the most straight-forward solution is to use literals:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;up&#39;</span><span class="p">:</span>
  <span class="c1"># ...</span>
<span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;down&#39;</span><span class="p">:</span>
  <span class="c1"># ...</span></code></pre></td></tr></table>
</div>
</div>

<p>This might seem like pythonic code, but its simplicity could bite you. If you have a lot of conditions and perhaps in multiple locations in your code, what happens if you mistype any of those string literals? Python will not complain, and there will not be any runtime errors. But you will end up with logical errors that could be insanely hard to track down.</p>

<p>Numeric literals are double trouble as the also comes with the issue of <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)">magic numbers</a>. In the following example we not only have to guess what the number 545 really means, but it is almost easier to mistype than a string since we can not use common sense to detect a spelling error:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">error_code</span> <span class="o">==</span> <span class="mi">545</span><span class="p">:</span>
  <span class="c1"># ...</span></code></pre></td></tr></table>
</div>
</div>

<p>In order to make your code more readable and to make it crash on any typos, using constants is often recommended. Simply extract the raw values into appropriately located constants (in Python just uppercased variables) and use the constants in the all if-expressions:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">UP</span> <span class="o">=</span> <span class="s1">&#39;up&#39;</span>
<span class="n">DOWN</span> <span class="o">=</span> <span class="s1">&#39;down&#39;</span>

<span class="k">if</span> <span class="n">direction</span> <span class="o">==</span> <span class="n">UP</span><span class="p">:</span>
  <span class="c1"># ...</span></code></pre></td></tr></table>
</div>
</div>

<p>And with numeric literals:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">SERVER_DOWN</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">CONNECTION_ERROR</span> <span class="o">=</span> <span class="mi">200</span>

<span class="k">if</span> <span class="n">error_code</span> <span class="o">==</span> <span class="n">SERVER_DOWN</span><span class="p">:</span>
  <span class="c1"># ...</span></code></pre></td></tr></table>
</div>
</div>

<p>In the first example Python will throw a NameError if you by mistake type &ldquo;UPP&rdquo;, &ldquo;uP&rdquo; or &ldquo;OP&rdquo;. Had we used string literals, Python would have had no way to recognize your typing error.</p>

<p>In larger projects you could group all constants in one or more modules. Since Python 3.4 there is also a new tool to help organize this: enums.</p>

<p>Enums are declared as classes but inherit from enum.Enum. This allows us to group related constants under a canonical name:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">enum</span>

<span class="k">class</span> <span class="nc">ErrorCode</span><span class="p">(</span><span class="n">enum</span><span class="o">.</span><span class="n">Enum</span><span class="p">):</span>
  <span class="n">SERVER_DOWN</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="n">CONNECTION_ERROR</span> <span class="o">=</span> <span class="mi">200</span>

<span class="n">error</span> <span class="o">=</span> <span class="mi">100</span>

<span class="k">if</span> <span class="n">error</span> <span class="o">==</span> <span class="n">ErrorCode</span><span class="o">.</span><span class="n">SERVER_DOWN</span><span class="o">.</span><span class="n">value</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;Server is down&#39;</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Enums can be compared with the <strong><em>is</em></strong> keyword. If you are in control of how each operand in a comparison is created, you could therefor use enums throughout your code to increase the readability even futher:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">enum</span>

<span class="k">class</span> <span class="nc">ErrorCode</span><span class="p">(</span><span class="n">enum</span><span class="o">.</span><span class="n">Enum</span><span class="p">):</span>
  <span class="n">SERVER_DOWN</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="n">CONNECTION_ERROR</span> <span class="o">=</span> <span class="mi">200</span>

<span class="n">error</span> <span class="o">=</span> <span class="n">ErrorCode</span><span class="o">.</span><span class="n">CONNECTION_ERROR</span>

<span class="k">if</span> <span class="n">error</span> <span class="ow">is</span> <span class="n">ErrorCode</span><span class="o">.</span><span class="n">CONNECTION_ERROR</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;There is a connetion error&#39;</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Do however keep in mind that <a href="https://stackoverflow.com/questions/30812793/how-to-use-python-3-4s-enums-without-significant-slowdown">enum attribute lookups are slower than regular attributes lookups</a>.</p>

<h2 id="microseconds-and-accuracy-in-time-sleep">Microseconds and accuracy in time.sleep()</h2>

<p>The sleep function in the time module can be used to halt execution for a given number of seconds. But it is easy to miss that the argument can be a float as well. In other words, you can use microseconds and not just whole seconds:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">time</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>This can be useful when you need to make a short pause but not necesseraly in seconds. For example if you are hammering an internal or external API in some batch job it could be useful to let the other end catch its breath for a while by pausing for a few hundred microseconds.</p>

<p>Though you should not trust the accuracy of this function down to the microseconds, wether you are using seconds or microseconds. Since Python&rsquo;s sleep() uses the current operating system&rsquo;s underlying sleep-functionality, unless you are using a real-time system this function will not be 100% accurate:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">timeit</span>

<span class="n">time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="s1">&#39;time.sleep(0.05)&#39;</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>
<span class="n">time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="s1">&#39;time.sleep(0.05)&#39;</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>
<span class="n">time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="s1">&#39;time.sleep(0.05)&#39;</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">time</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="mf">5.273200581</span>
<span class="mf">5.261563578</span>
<span class="mf">5.282216143000001</span></code></pre></div>

<h2 id="be-more-effecient-with-the-repl">Be more effecient with the REPL</h2>

<p>The REPL is certainly one of Python&rsquo;s most unique features. While there are other languages that also provides some kind of interactive prompt, none is as fleshed out as in Python. And while it is easy to get started with, there a few tips that will help you work faster.</p>

<h3 id="interactive-execution-of-modules-and-packages">Interactive execution of modules and packages</h3>

<p>Probably the most useful feature of the REPL is the ability to load modules and packages in interactive mode. This is essentially the same as just doing <strong><em>import module_name</em></strong> while in the REPL, but this can also be done when launching the REPL. Simply use the -i flag and provide the name of the module or package (the package most be executable, in other words contain a <strong>main</strong>.py file):</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">python3</span> <span class="o">-</span><span class="n">i</span> <span class="n">filename</span><span class="o">.</span><span class="n">py</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">locals</span><span class="p">()</span>
<span class="p">{</span><span class="s1">&#39;__name__&#39;</span><span class="p">:</span> <span class="s1">&#39;__main__&#39;</span><span class="p">,</span> <span class="s1">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="s1">&#39;__package__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="s1">&#39;__loader__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">_frozen_importlib_external</span><span class="o">.</span><span class="n">SourceFileLoader</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x10e02c630</span><span class="o">&gt;</span><span class="p">,</span> <span class="s1">&#39;__spec__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="s1">&#39;__annotations__&#39;</span><span class="p">:</span> <span class="p">{},</span> <span class="s1">&#39;__builtins__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">module</span> <span class="s1">&#39;builtins&#39;</span> <span class="p">(</span><span class="n">built</span><span class="o">-</span><span class="ow">in</span><span class="p">)</span><span class="o">&gt;</span><span class="p">,</span> <span class="s1">&#39;__cached__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="s1">&#39;lst&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">lst</span> <span class="c1"># imported from provided module at start</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span></code></pre></div>

<p>If the module/package relies on a venv you obviosly need to activate that venv before launching the REPL. Also note that you can only provide one module or package with the -i flag, any futher arguments following the first will be ignored.</p>

<h3 id="passing-arguments-to-the-repl">Passing arguments to the REPL</h3>

<p>Another sometimes useful feature is the ability to pass regular arguments to the REPL, just as is possible when executing Python-files. This allows you to for example pipe information from bash in to your REPL-session. These arguments become available through sys.argv just as when executing a file:</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">python3</span> <span class="o">-</span> <span class="n">arg1</span> <span class="n">arg2</span> <span class="n">arg3</span>
<span class="n">Python</span> <span class="mf">3.7</span><span class="o">.</span><span class="mi">2</span> <span class="p">(</span><span class="n">v3</span><span class="o">.</span><span class="mf">7.2</span><span class="p">:</span><span class="mi">9</span><span class="n">a3ffc0492</span><span class="p">,</span> <span class="n">Dec</span> <span class="mi">24</span> <span class="mi">2018</span><span class="p">,</span> <span class="mo">0243</span><span class="p">)</span> 
<span class="p">[</span><span class="n">Clang</span> <span class="mf">6.0</span> <span class="p">(</span><span class="n">clang</span><span class="o">-</span><span class="mf">600.0</span><span class="o">.</span><span class="mi">57</span><span class="p">)]</span> <span class="n">on</span> <span class="n">darwin</span>
<span class="n">Type</span> <span class="s2">&#34;help&#34;</span><span class="p">,</span> <span class="s2">&#34;copyright&#34;</span><span class="p">,</span> <span class="s2">&#34;credits&#34;</span> <span class="ow">or</span> <span class="s2">&#34;license&#34;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sys</span><span class="p">;</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span>
<span class="p">[</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39;arg1&#39;</span><span class="p">,</span> <span class="s1">&#39;arg2&#39;</span><span class="p">,</span> <span class="s1">&#39;arg3&#39;</span><span class="p">]</span></code></pre></div>

<p>Or if you prefer <a href="https://andreasbergstrom.com/posts/python-argparse/">argparse</a> just configure it like:</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">argparse</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;args&#39;</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s1">&#39;N&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;arguments&#39;</span><span class="p">)</span>
<span class="n">_StoreAction</span><span class="p">(</span><span class="n">option_strings</span><span class="o">=</span><span class="p">[],</span> <span class="n">dest</span><span class="o">=</span><span class="s1">&#39;args&#39;</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="n">const</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="nb">type</span><span class="o">=&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">str</span><span class="s1">&#39;&gt;, choices=None, help=&#39;</span><span class="n">arguments</span><span class="s1">&#39;, metavar=&#39;</span><span class="n">N</span><span class="s1">&#39;)</span><span class="err">
</span><span class="err"></span><span class="s1">&gt;&gt;&gt; args = vars(parser.parse_args())</span><span class="err">
</span><span class="err"></span><span class="s1">&gt;&gt;&gt; args</span><span class="err">
</span><span class="err"></span><span class="s1">{&#39;</span><span class="n">args</span><span class="s1">&#39;: [&#39;</span><span class="n">arg1</span><span class="s1">&#39;, &#39;</span><span class="n">arg2</span><span class="s1">&#39;, &#39;</span><span class="n">arg3</span><span class="s1">&#39;]}</span></code></pre></div>

<p>One useful example is if you need the contents of a SSH-key in the REPL:</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">python3</span> <span class="o">-</span> <span class="err">$</span><span class="p">(</span><span class="n">cat</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">id_rsa</span><span class="o">.</span><span class="n">pub</span><span class="p">)</span>
<span class="n">Python</span> <span class="mf">3.7</span><span class="o">.</span><span class="mi">2</span> <span class="p">(</span><span class="n">v3</span><span class="o">.</span><span class="mf">7.2</span><span class="p">:</span><span class="mi">9</span><span class="n">a3ffc0492</span><span class="p">,</span> <span class="n">Dec</span> <span class="mi">24</span> <span class="mi">2018</span><span class="p">,</span> <span class="mo">0243</span><span class="p">)</span> 
<span class="p">[</span><span class="n">Clang</span> <span class="mf">6.0</span> <span class="p">(</span><span class="n">clang</span><span class="o">-</span><span class="mf">600.0</span><span class="o">.</span><span class="mi">57</span><span class="p">)]</span> <span class="n">on</span> <span class="n">darwin</span>
<span class="n">Type</span> <span class="s2">&#34;help&#34;</span><span class="p">,</span> <span class="s2">&#34;copyright&#34;</span><span class="p">,</span> <span class="s2">&#34;credits&#34;</span> <span class="ow">or</span> <span class="s2">&#34;license&#34;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sys</span><span class="p">;</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span>
<span class="p">[</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39;ssh-rsa&#39;</span><span class="p">,</span> <span class="s1">&#39;AAAAB3NzaC1yc2EAAAADAQABA...</span></code></pre></div>

<h3 id="use-underscore-instead-of-temporary-variables">Use underscore instead of temporary variables</h3>

<p>Often when the REPL is used to experiment you will need to juggle values back and forth. In those scenarios it is common to create a lot of temporary variables just to keep the result of the last command around. But there is actually an easy way to do that without creating variables left and right.</p>

<p>All expressions evaluated in the REPL return a value, and if that value is <strong>not</strong> None it will actually automatically be stored in a built-in variable. If you have done Python programming for some time you might have come across the best-practice of using _ for throw-away variables, most commonly in for-loops with ranges. In the REPL _ serves a different purpose:</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span> <span class="o">+</span> <span class="mi">3</span>
<span class="mi">6</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span>
<span class="mi">6</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span>
<span class="mi">6</span></code></pre></div>

<p>Pay attention to the last lines, where the result of an addition operation is assigned to a but _ still contains 6 since the assignment expression returned None.</p>

<p>You can still use _ as a variable name and assign it normally, but that will cancel its default behaviour. To reset it, just run <strong>del _</strong>:</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span>
<span class="s1">&#39;test&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">_</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">5</span>
<span class="mi">10</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span>
<span class="mi">10</span></code></pre></div>

<h2 id="understand-truthy-and-falsy">Understand truthy and falsy</h2>

<p>Truthy and falsy are the ways values implicitly converts to booleans when used in if-expressions, and are different to the booleans True and False. Booleans work pretty much identical in every major programming language. But the workings of truthy and falsy are not. Javascript are infamous for being really messy and inconsistent with its truthy and falsy values, while Swift and C# simply does not allow any implicit conversion to booleans. Python sits somewhere in between with a very rational and sensible arrangement.</p>

<p>When evaluated in if-expressions, the following values will evaluate to False:</p>

<ul>
<li>False</li>
<li>None</li>
<li>0 (integer)</li>
<li>0.0 (float)</li>
<li>0j (complex)</li>
<li>Decimal(0)</li>
<li>Fraction(0, 1)</li>
<li>[] (empty list)</li>
<li>{} (empty dict)</li>
<li>() (empty tuple)</li>
<li>set() (empty set)</li>
<li>&rdquo; (empty string)</li>
<li>b&rdquo; (empty bytestring)</li>
<li>any empty range, like range(0) or range(0, 0)</li>
<li>objects with an implementation of <strong>bool</strong>() that returns False</li>
<li>objects with an implementatino of <strong>len</strong>() that returns 0</li>
</ul>

<p>New Python developers with a background in Javascript or PHP should note that there is no such thing as loosely comparissons in Python. So while you in Javascript can do this:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&gt;</span> <span class="s1">&#39;&#39;</span> <span class="o">==</span> <span class="kc">false</span>
<span class="kc">true</span>
<span class="o">&gt;</span> <span class="s1">&#39;&#39;</span> <span class="o">===</span> <span class="kc">false</span>
<span class="kc">false</span>
</code></pre></td></tr></table>
</div>
</div>

<p>And in PHP:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">php &gt; if(&#39;&#39; == false) { echo &#39;false&#39;;  }
false
php &gt; if(&#39;&#39; === false) { echo &#39;false&#39;;  }
php &gt; </code></pre></td></tr></table>
</div>
</div>

<p>But Python does not work the same way, there is only strict comparisson that compares both value and type:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;&#39;</span> <span class="o">==</span> <span class="nx">False</span>
<span class="nx">False</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;&#39;</span> <span class="o">==</span> <span class="nx">True</span>
<span class="nx">False</span>
</code></pre></td></tr></table>
</div>
</div>


]]></content></item><item><title>Master date and time handling in Python</title><link>https://andreasbergstrom.com/posts/master-python-dates/</link><pubDate>Thu, 28 Mar 2019 08:38:33 +0100</pubDate><guid>https://andreasbergstrom.com/posts/master-python-dates/</guid><description>It might seem like a basic advice, but you will be suprised how much time you can save by simply learning how to properly work with dates. While this is a common task it is often not practiced enough that you really remember all the ins and outs of it. But it is really simple!
When dealing with dates you will want to use the datetime packages, which comes with both date and datetime.</description><content type="html"><![CDATA[<p>It might seem like a basic advice, but you will be suprised how much time you can save by simply learning how to properly work with dates. While this is a common task it is often not practiced enough that you really remember all the ins and outs of it. But it is really simple!</p>

<p>When dealing with dates you will want to use the datetime packages, which comes with both date and datetime. The former is for working with dates and the latter for dates and time. There is also the less used time module. We will use datetime for the upcoming examples:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span></code></pre></td></tr></table>
</div>
</div>

<p>When working with dates you will also often use the timedelta module, which expresses the difference between two date, time or datetimes objects:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">timedelta</span></code></pre></td></tr></table>
</div>
</div>

<p>To get todays date as a datetime-object:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">610489</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>To create a datetime object you need to pass at least year, month and day:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="mi">2019</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>We can get the duration between two dates as a timedelta object by using subtraction:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="mi">2019</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">seconds</span><span class="o">=</span><span class="mi">47625</span><span class="p">,</span> <span class="n">microseconds</span><span class="o">=</span><span class="mi">375671</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Comparison can be used to determinate if a date is in the past or in the future:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="mi">2019</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
<span class="bp">True</span></code></pre></td></tr></table>
</div>
</div>

<p>By adding a timedelta to a datetime you get a new datetime:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="mi">2019</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">31</span><span class="p">)</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Subtracting a timedelta from another timedelta returns a new timedelta object:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">weeks</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Just as with objects of type datetime (and date and time) we can use comparison on timedeltas:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="bp">True</span></code></pre></td></tr></table>
</div>
</div>

<p>Every datetime object has a handful of attributes that allows you to easily get different parts of the date:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">year</span>
<span class="mi">2019</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">month</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">day</span>
<span class="mi">27</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">hour</span>
<span class="mi">11</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">minute</span>
<span class="mi">19</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">second</span>
<span class="mi">14</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">microsecond</span>
<span class="mi">346797</span></code></pre></td></tr></table>
</div>
</div>

<p>Since a datetime includes both the date and time, it can easily return either as a new date or time object:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">date</span><span class="p">()</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">27</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">time</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">409267</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Converting to and from timestamps:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">timestamp</span><span class="p">()</span>
<span class="mf">1553686909.903327</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromtimestamp</span><span class="p">(</span><span class="mf">1553686909.903327</span><span class="p">)</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">903327</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Parsing a string into a date, time or datetime object:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s1">&#39;2000-01-01&#39;</span><span class="p">,</span> <span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Formating a date, time or datetime object into a string:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%c</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="s1">&#39;Wed Mar 27 1248 2019&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%A </span><span class="si">%-d</span><span class="s1"> %B %Y&#39;</span><span class="p">)</span>
<span class="s1">&#39;Wednesday 27 March 2019&#39;</span></code></pre></td></tr></table>
</div>
</div>

<p>And finally a topic that sends chills down the spines of many programmers; timezones. The easiest way to handle those in Python is to use the 3rd party <a href="https://pypi.org/project/pytz/">pytz</a> package:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">pytz</span> <span class="kn">import</span> <span class="n">timezone</span></code></pre></td></tr></table>
</div>
</div>

<p>By default all datetimes in Python is said to be <strong><em>naive</em></strong>, meaning they lack any timezone information. The pytz package can make a datetime object <strong><em>aware</em></strong>, which its data will include the timezone:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">994510</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tz</span> <span class="o">=</span> <span class="n">timezone</span><span class="p">(</span><span class="s1">&#39;Europe/Stockholm&#39;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(</span><span class="n">tz</span><span class="p">)</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">45471</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=&lt;</span><span class="n">DstTzInfo</span> <span class="s1">&#39;Europe/Stockholm&#39;</span> <span class="n">CET</span><span class="o">+</span><span class="mi">100</span> <span class="n">STD</span><span class="o">&gt;</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>It is also possible to localize an existing datetime:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">tz</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2011</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">))</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2011</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=&lt;</span><span class="n">DstTzInfo</span> <span class="s1">&#39;Europe/Stockholm&#39;</span> <span class="n">CET</span><span class="o">+</span><span class="mi">100</span> <span class="n">STD</span><span class="o">&gt;</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Converting from one timezone to another is done through the astimezone() method. Notice the date and time does not change, only the timezone:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">dt_now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(</span><span class="n">tz</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">dt_now</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">952962</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=&lt;</span><span class="n">DstTzInfo</span> <span class="s1">&#39;Europe/Stockholm&#39;</span> <span class="n">CET</span><span class="o">+</span><span class="mi">100</span> <span class="n">STD</span><span class="o">&gt;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">dt_now</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">timezone</span><span class="p">(</span><span class="s1">&#39;US/Samoa&#39;</span><span class="p">))</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">952962</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=&lt;</span><span class="n">DstTzInfo</span> <span class="s1">&#39;US/Samoa&#39;</span> <span class="n">SST</span><span class="o">-</span><span class="mi">1</span> <span class="n">day</span><span class="p">,</span> <span class="mi">1300</span> <span class="n">STD</span><span class="o">&gt;</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>To view all available timezones use pytz.all_timezones:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">pytz</span> <span class="kn">import</span> <span class="n">all_timezones</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">all_timezones</span>
<span class="p">[</span><span class="s1">&#39;Africa/Abidjan&#39;</span><span class="p">,</span> <span class="s1">&#39;Africa/Accra&#39;</span><span class="p">,</span> <span class="s1">&#39;Africa/Addis_Ababa&#39;</span><span class="o">...</span></code></pre></td></tr></table>
</div>
</div>
]]></content></item><item><title>Python random name generator</title><link>https://andreasbergstrom.com/posts/python-random-name-generator/</link><pubDate>Wed, 20 Mar 2019 15:20:53 +0100</pubDate><guid>https://andreasbergstrom.com/posts/python-random-name-generator/</guid><description>Generates a random name-like string, uses a generator function to yield each letter.
Gist on Github
import string import random vowels = &amp;#39;aeiou&amp;#39; consonants = &amp;#39;bcdfghijklmnpqrstvwxz&amp;#39; def get_letter(last_letter=None): # Check if last letter generated was a consonant if last_letter: last_letter = &amp;#39;&amp;#39;.join(last_letter) last_letter_was_consonant = last_letter in consonants else: last_letter_was_consonant = False # If last letter was a vowel, make it 50% chance to generate a consonant if not last_letter_was_consonant and bool(random.</description><content type="html"><![CDATA[<p>Generates a random name-like string, uses a generator function to yield each letter.</p>

<p><a href="https://gist.github.com/andreas-bergstrom/e2cfeeeec576cf209d10153ececd8290">Gist on Github</a></p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">string</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="n">vowels</span> <span class="o">=</span> <span class="s1">&#39;aeiou&#39;</span>
<span class="n">consonants</span> <span class="o">=</span> <span class="s1">&#39;bcdfghijklmnpqrstvwxz&#39;</span>


<span class="k">def</span> <span class="nf">get_letter</span><span class="p">(</span><span class="n">last_letter</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="c1"># Check if last letter generated was a consonant</span>
    <span class="k">if</span> <span class="n">last_letter</span><span class="p">:</span>
        <span class="n">last_letter</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">last_letter</span><span class="p">)</span>
        <span class="n">last_letter_was_consonant</span> <span class="o">=</span> <span class="n">last_letter</span> <span class="ow">in</span> <span class="n">consonants</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">last_letter_was_consonant</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="c1"># If last letter was a vowel, make it 50% chance to generate a consonant</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">last_letter_was_consonant</span> <span class="ow">and</span> <span class="nb">bool</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)):</span>
        <span class="n">last_was_consonant</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">yield</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">consonants</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">last_was_consonant</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">yield</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">vowels</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">generate_word</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">spread</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">word</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">spread</span><span class="p">)):</span>
        <span class="n">word</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">get_letter</span><span class="p">(</span><span class="n">last_letter</span><span class="o">=</span><span class="n">word</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">:])))</span>

    <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">word</span><span class="p">)</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;Generating 10 random names:&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">generate_word</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">spread</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span></code></pre></div>

<iframe height="400px" width="100%" src="https://repl.it/@andreas_bergstrom/randomnamespy?lite=true&outputonly=1" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>


]]></content></item><item><title>Comments in Hugo</title><link>https://andreasbergstrom.com/posts/comments-in-hugo/</link><pubDate>Wed, 06 Mar 2019 10:52:23 +0100</pubDate><guid>https://andreasbergstrom.com/posts/comments-in-hugo/</guid><description>This site is powered by Hugo, a static site generator for Hugo. It sits in the same category as Jekyll (Ruby), Pelican (Python), Jigsaw (PHP), Windersmith (Node) and Wyam (.Net Core), if you&amp;rsquo;re coming from any of those platforms.
I love the concept of handling content as raw markdown and keeping it version controlled with Git. But one thing I struggled to find a solution to was how to &amp;ldquo;comment out&amp;rdquo; chunks of content that shold not be rendered to HTML by Hugo, similarly to how you can comment out regular code.</description><content type="html"><![CDATA[<p>This site is powered by Hugo, a static site generator for Hugo. It sits in the same category as Jekyll (Ruby), Pelican (Python), Jigsaw (PHP), Windersmith (Node) and Wyam (.Net Core), if you&rsquo;re coming from any of those platforms.</p>

<p>I love the concept of handling content as raw markdown and keeping it version controlled with Git. But one thing I struggled to find a solution to was how to &ldquo;comment out&rdquo; chunks of content that shold not be rendered to HTML by Hugo, similarly to how you can comment out regular code. Using HTML-comments is not an option as that would expose my comments in the HTML-code.</p>

<p>It is a tricky topic to google-search as you will find a lot related to adding Disqus and other ways to implement comments in Hugo. But from what I could find most answers on forums and Stack Overflow says that since Hugo is written in Go, I should be able to use regular Go template comments like this:</p>

<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{{</span><span class="cm">/* a comment */</span><span class="p">}}</span></code></pre></div>

<p>However this seems to interfere with the templating language used by Hugo as this will still output the tags and any inner content, just as raw text (see below).</p>

<p>What did work was to create a custom shortcode in <strong>layouts/shortcodes/todo.html</strong> (or whatever shortcade name you prefer) and populate it with:</p>

<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{{</span> <span class="k">if</span> <span class="p">.</span><span class="nx">Inner</span> <span class="p">}}{{</span> <span class="nx">end</span> <span class="p">}}</span></code></pre></div>

<p>This is a seemingly useless shortcode that does not do anything with any content or parameters that is passed to it. Which is exactly what we want! Now we can use it in any markdown content to simulate comments:</p>

<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">{{<span class="p">&lt;</span> <span class="nt">todo</span> <span class="p">&gt;</span>}}
Any text added here will not be rendered
- Which is great for adding todos and other notes to your posts
{{<span class="p">&lt;</span> <span class="p">/</span> <span class="nt">todo</span> <span class="p">&gt;</span>}}</code></pre></div>

<p>You can read more about custom shortcodes in the <a href="https://gohugo.io/templates/shortcode-templates/#create-custom-shortcodes">Hugo docs</a>.</p>

<p>As a sidenote: if you need to display Hugo shortcodes in raw format as above, you need to use {{&lt;/* */&gt;}} instead of {{&lt; &gt;}}:</p>

<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{{&lt;</span><span class="cm">/* todo */</span><span class="p">&gt;}}</span>
<span class="p">{{&lt;</span><span class="cm">/* / todo */</span><span class="p">&gt;}}</span></code></pre></div>

<p>This way the text will be rendered raw instead of processed.</p>
]]></content></item><item><title>Better Python Command Line Arguments with argparse</title><link>https://andreasbergstrom.com/posts/python-argparse/</link><pubDate>Tue, 05 Mar 2019 21:10:21 +0100</pubDate><guid>https://andreasbergstrom.com/posts/python-argparse/</guid><description>If you search for information on how to write Python modules that accepts command line arguments, you are very likely to stumble upon sys.argv and getopt() and go with it. But since Python 3.2 there is a better alternative that requires less boilerplate and less re-inventing the wheel: argparse.
Just like getopt() argparse relies on sys.argv but it is more high-level and provides more functionality out of the box. At the core of argparse is the class ArgumentParser, which returns an object that you can use to create the argument interface.</description><content type="html"><![CDATA[<p>If you search for information on how to write Python modules that accepts command line arguments, you are very likely to stumble upon sys.argv and getopt() and go with it. But since Python 3.2 there is a better alternative that requires less boilerplate and less re-inventing the wheel: argparse.</p>

<p>Just like getopt() argparse relies on sys.argv but it is more high-level and provides more functionality out of the box. At the core of argparse is the class ArgumentParser, which returns an object that you can use to create the argument interface. This interface will automatically provide argument parsing and generate the help text that users expect when using -h or &ndash;help.</p>

<p>We will start with a simple program that accepts two positional arguments:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">argparse</span>

<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;positional_argument_1&#34;</span><span class="p">)</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;positional_argument_2&#34;</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">positional_argument_1</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>So first a ArgumentParser-object is created, which we then add two (requied) positional arguments to and finally we dispatch the parser. This will then look into sys.argv and figure out how to parse its contents (which is all arguments provided by the user).</p>

<p>That looks very neat and object-oriented. But we could instead access any positonal arguments directly through sys.argv with much less code:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="c1"># note: 0 = the name of the script, first positional argument at 1</span></code></pre></td></tr></table>
</div>
</div>

<p>So what is the point of using argparser? Let&rsquo;s look at a more functional example:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">argparse</span>
 
<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;-s&#34;</span><span class="p">,</span> <span class="s2">&#34;--string&#34;</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
	<span class="n">help</span><span class="o">=</span><span class="s2">&#34;string to uppercase&#34;</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">())</span>
 
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Uppercase of {args[&#39;string&#39;]} is {args[&#39;string&#39;].upper()}&#34;</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Here we can see argparse starts to shine. This time we add an argument as a flag argument instead of positional. It is also set as required and a small help text is provided. This is what is returned if we run the script without any arguments:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">usage: main.py <span class="o">[</span>-h<span class="o">]</span> -s STRING
main.py: error: the following arguments are required: -s/--string</code></pre></div>

<p>So argparse will automatically make sure all required arguments are provided. And it also displays usage information on what arguments this program expects, something familiar to anyone who has used command line programs. If we provide only the -h flag futher information is shown:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">usage: main.py <span class="o">[</span>-h<span class="o">]</span> -s STRING

optional arguments:
  -h, --help            show this <span class="nb">help</span> message and <span class="nb">exit</span>
  -s STRING, --string STRING
                        string to uppercase</code></pre></div>

<p>This format should be even more familiar if you have played around on the command line. And argparse will automatically provide this help interface from the arguments that is specified, we did not have to set anything up ourselves!</p>

<p>So now we know how to use this program and if we provide -s andreas it will return:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Uppercase of andreas is ANDREAS</code></pre></div>

<p>For this input sys.argv will contain either [&lsquo;main.py&rsquo;, &lsquo;-s&rsquo;, &lsquo;andreas&rsquo;], or [&lsquo;main.py&rsquo;, &lsquo;&ndash;string&rsquo;, &lsquo;andreas&rsquo;] if we had used the &ndash;string flag instead. But thanks to argparser we no longer have to parse this manually and can ignore all possible edge-cases and order.</p>

<p>This is just the basics and I plan to cover more advanced usage sometime. The <a href="https://docs.python.org/3.3/library/argparse.html">docs</a> has a more complete reference.</p>

<p>While argparser only handles arguments sent when starting the program, you can use <a href="https://github.com/prompt-toolkit/python-prompt-toolkit">python-prompt-toolkit</a> to create more interactive command prompts.</p>


]]></content></item><item><title>Python del vs assigning to None</title><link>https://andreasbergstrom.com/posts/python-del-vs-assign-none/</link><pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate><guid>https://andreasbergstrom.com/posts/python-del-vs-assign-none/</guid><description>Python utilizes garbage collection to free the developer from the hassle of manually handling allocating and de-allocating memory. But there are still some details that could suprise you unless you are aware of them.
Because even though the Python runtime will take care of memory management, sometimes developers will want to manually tell the garbage colletor that a variable is no longer needed. Either because they are doing some edge-case optimization and really know what they are doing or they think they are smart but have no idea what they are doing.</description><content type="html"><![CDATA[<p>Python utilizes garbage collection to free the developer from the hassle of manually handling allocating and de-allocating memory. But there are still some details that could suprise you unless you are aware of them.</p>

<p>Because even though the Python runtime will take care of memory management, sometimes developers will want to manually tell the garbage colletor that a variable is no longer needed. Either because they are doing some edge-case optimization and really know what they are doing or they think they are smart but have no idea what they are doing. Most likely the latter as the Python runtime most often does not release unused memory back to the operating system.</p>

<p>But when someone need to somehow mark a variable as ready to be freed by the garbage collector, there are usually two solutions they come across:</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="bp">None</span></code></pre></div>

<p>or</p>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">del</span> <span class="n">x</span></code></pre></div>

<p>The difference is that <strong>x = None</strong> will free whatever it referenced but keep the name around even though it&rsquo;s just referencing None (which is a type, NoneType).</p>

<p>On the other hand <strong>del x</strong> will completely remove both the name and what it referenced. If you thereafter try to use x an NameError will be thrown (or AttributeError in case of a object property).</p>

<p>So in practice, by assigning None to a name you can still use it in expressions while using del the name is completely removed. In the first case a few bytes is needed to keep the name in memory, while the later completely clears all memory usage.</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">gc</span>

<span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;Some text here to give the variable a decent size&#39;</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x value before deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x size before deletion: {} bytes&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">getsizeof</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;y value before deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>

<span class="n">x</span> <span class="o">=</span> <span class="bp">None</span>
<span class="k">del</span> <span class="n">y</span>
<span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span> <span class="c1"># Not really needed, just to show garbage collection has been done hereafter</span>

<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x value after deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x size after deletion: {} bytes&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">getsizeof</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span> <span class="c1"># A few bytes needed to keep symbol name</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;x type after deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">x</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;Can still use x!&#39;</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s1">&#39;y value after deletion: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y</span><span class="p">))</span> <span class="c1"># Will throw NameError (AttributeError in case of class property)</span></code></pre></td></tr></table>
</div>
</div>

<p>Output:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">x value before deletion: Some text here to give the variable a decent size
x size before deletion: <span class="m">98</span> bytes
y value before deletion: <span class="m">2</span>
x value after deletion: None
x size after deletion: <span class="m">16</span> bytes
x <span class="nb">type</span> after deletion: &lt;class <span class="s1">&#39;NoneType&#39;</span>&gt;
Can still use x!
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">&#34;Untitled.py&#34;</span>, line <span class="m">21</span>, in &lt;module&gt;
    print<span class="o">(</span><span class="s1">&#39;y value after deletion: {}&#39;</span>.format<span class="o">(</span>y<span class="o">))</span> <span class="c1"># Will throw NameError (AttributeError in case of class property)</span>
NameError: name <span class="s1">&#39;y&#39;</span> is not defined</code></pre></div>

<p>As you can see in the error above, if you for whatever reason need to hook into the memory management, unless you know the difference between assigning to None and using <strong>del</strong> it could confuse you.</p>

<p>Let us now look at the bytecode to see the technical difference:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">gc</span>
<span class="kn">import</span> <span class="nn">dis</span>

<span class="k">def</span> <span class="nf">using_none</span><span class="p">():</span>
	<span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>

	<span class="n">x</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># &lt;-- ASSIGNING TO NONE</span>

<span class="k">def</span> <span class="nf">using_del</span><span class="p">():</span>
	<span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>

	<span class="k">del</span> <span class="n">x</span> <span class="c1"># &lt;-- USING DEL</span>

<span class="k">print</span><span class="p">(</span><span class="s2">&#34;Bytecode when assigning to None:&#34;</span><span class="p">)</span>
<span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">using_none</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">Bytecode when using del:&#34;</span><span class="p">)</span>
<span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">using_del</span><span class="p">)</span></code></pre></td></tr></table>
</div>
</div>

<p>Output:</p>

<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Bytecode when assigning to None:
  <span class="m">5</span>           <span class="m">0</span> LOAD_CONST               <span class="m">1</span> <span class="o">(</span><span class="m">1</span><span class="o">)</span>
              <span class="m">2</span> STORE_FAST               <span class="m">0</span> <span class="o">(</span>x<span class="o">)</span>

  <span class="m">7</span>           <span class="m">4</span> LOAD_CONST               <span class="m">0</span> <span class="o">(</span>None<span class="o">)</span>
              <span class="m">6</span> STORE_FAST               <span class="m">0</span> <span class="o">(</span>x<span class="o">)</span>
              <span class="m">8</span> LOAD_CONST               <span class="m">0</span> <span class="o">(</span>None<span class="o">)</span>
             <span class="m">10</span> RETURN_VALUE

Bytecode when using del:
 <span class="m">10</span>           <span class="m">0</span> LOAD_CONST               <span class="m">1</span> <span class="o">(</span><span class="m">1</span><span class="o">)</span>
              <span class="m">2</span> STORE_FAST               <span class="m">0</span> <span class="o">(</span>x<span class="o">)</span>

 <span class="m">12</span>           <span class="m">4</span> DELETE_FAST              <span class="m">0</span> <span class="o">(</span>x<span class="o">)</span>
              <span class="m">6</span> LOAD_CONST               <span class="m">0</span> <span class="o">(</span>None<span class="o">)</span>
              <span class="m">8</span> RETURN_VALUE</code></pre></div>

<p>So using <strong>del</strong> results in only one bytecode, DELETE_FAST, while assigning to None actually runs a full assignment using LOAD_CONST and STORE_FAST. The last LOAD_CONST before RETURN_VALUE in both functions is simply the return value None that every Python function implicitly returns.</p>
]]></content></item></channel></rss>